package com.eastelite.activity.InformationRelease.utils;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PixelFormat;
import android.os.Build;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;

import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import cn.com.eastelite.wj_library.Log.L;


/**
 * 获取截屏 （包括surfaceView）
 */
public class GlobalScreenshot2 {
    private static final String DEVICE_NAME = "/dev/graphics/fb0";
    @SuppressWarnings("deprecation")
    public  static Bitmap acquireScreenshot(Context context) {
        WindowManager mWinManager = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE) ;
        DisplayMetrics metrics = new DisplayMetrics() ;
        Display display = mWinManager.getDefaultDisplay() ;
        display.getMetrics(metrics) ;
        // 屏幕高
        int height = metrics.heightPixels;
        // 屏幕的宽
        int width = metrics.widthPixels;

        int pixelformat = display.getPixelFormat();
        PixelFormat localPixelFormat1 = new PixelFormat();
        PixelFormat.getPixelFormatInfo(pixelformat, localPixelFormat1);
        // 位深
        int deepth = localPixelFormat1.bytesPerPixel;

        byte[] arrayOfByte = new byte[height * width * deepth];
//        try {
            // 读取设备缓存，获取屏幕图像流
        try {
            InputStream localInputStream = readAsRoot();
            DataInputStream localDataInputStream = new DataInputStream(localInputStream) ;
            localDataInputStream.readFully(arrayOfByte);
            localInputStream.close();

        } catch (Exception e) {
            e.printStackTrace();
            return  null;
        }

            int[] tmpColor = new int[width * height];
            int r, g, b;
            for (int j = 0; j < width * height * deepth; j += deepth) {
                b = arrayOfByte[j] & 0xff;
                g = arrayOfByte[j + 1] & 0xff;
                r = arrayOfByte[j + 2] & 0xff;
                tmpColor[j / deepth] = (r << 16) | (g << 8) | b | (0xff000000);
            }
            // 构建bitmap
            Bitmap scrBitmap = Bitmap.createBitmap(tmpColor, width, height, Bitmap.Config.ARGB_8888);
//            L.e("scrBitmap-->"+scrBitmap.getWidth()+"  height->"+scrBitmap.getHeight());

            /*------------------图片旋转----------------------*/

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {   ///    不同版本  不同命令19
                return scrBitmap ;
            } else {
                // 创建操作图片用的matrix对象
                Matrix matrix = new Matrix();

                //旋转图片 动作
                matrix.postRotate(180);
                // 创建新的图片
                Bitmap resizedBitmap = Bitmap.createBitmap(scrBitmap, 0, 0,
                        width, height, matrix, true);
                return resizedBitmap;
            }
//        } catch (Exception e) {
//            L.e( "#### 读取屏幕截图失败 ");
//            e.printStackTrace();
//        }

//        return null;

    }
    /**
     *  以root权限读取屏幕截图
     */
    public static InputStream readAsRoot()  {
        File deviceFile = new File(DEVICE_NAME);
        Process localProcess = null;
        try {
            localProcess = Runtime.getRuntime().exec("su");
        } catch (IOException e) {
            e.printStackTrace();
        }
        String str = "cat " + deviceFile.getAbsolutePath() + "\n";
        try {
            localProcess.getOutputStream().write(str.getBytes());
        } catch (IOException e) {
            L.e("执行  cat   命令失败  ");
            e.printStackTrace();
        }
        return localProcess.getInputStream();
    }

    public static int dip2px(Context context, float dipValue){
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int)(dipValue * scale + 0.5f);
    }
    public static int px2dip(Context context, float pxValue){
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int)(pxValue / scale + 0.5f);
    }
}
